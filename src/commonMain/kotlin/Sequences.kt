package com.tomuvak.testing.gc

import com.tomuvak.weakReference.WeakReference

/**
 * Returns a pair consisting of a sequence of [numElements] objects, each generated by calling [elementGenerator] with
 * the respective object's zero-based index, and a list of weak references to these objects. The list of weak references
 * is available immediately, but the objects themselves are yielded by the sequence one by one, with each object
 * forgotten once it's been yielded. In particular, the sequence can only be iterated once.
 */
fun <T : Any> generateSequenceAndWeakReferences(
    numElements: Int,
    elementGenerator: (Int) -> T
): Pair<Sequence<T>, List<WeakReference<T>>> {
    val elements = MutableList<T?>(numElements, elementGenerator)
    val references = elements.map { WeakReference(it!!) }
    return sequence { repeat(numElements) { index ->
        yield(elements[index]!!.also { elements[index] = null })
    } }.constrainOnce() to references
}

/**
 * Retrieves the next element from the receiver iterator [this] – and discards it. Useful for tests relying on garbage
 * collection, as using this function – as opposed to calling `.next()` directly – helps them avoid creating a (hidden)
 * strong reference to the element (which would foil garbage collection).
 */
fun <T> Iterator<T>.dismissNext() { next() }
